// Copyright 2025 长林啊 <767425412@qq.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/clin211/miniblog-v2.git.

syntax = "proto3";

package v1;

// 提供用于定义 HTTP 映射的功能，比如通过 option (google.api.http) 实现 gRPC 到 HTTP 的映射
import "google/api/annotations.proto";
// 提供了一个标准的空消息类型 google.protobuf.Empty，适用于 RPC 方法不需要输入消息或输出消息的场景
import "google/protobuf/empty.proto";
// 定义当前服务所依赖的健康检查消息
import "apiserver/v1/healthz.proto";
// 定义当前服务所依赖的博客消息
import "apiserver/v1/post.proto";
// 定义当前服务所依赖的用户消息
import "apiserver/v1/user.proto";
// 定义当前服务所依赖的分类消息
import "apiserver/v1/category.proto";
// 定义当前服务所依赖的标签消息
import "apiserver/v1/tag.proto";
// 定义当前服务所依赖的文章标签关联消息
import "apiserver/v1/post_tag.proto";
// 为生成 OpenAPI 文档提供相关注释（如标题、版本、作者、许可证等信息）
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/clin211/miniblog-v2/pkg/api/apiserver/v1;v1";

// OpenAPI 全局配置，提供详细配置信息，用于生成 OpenAPI 文档
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        // API名称
        title: "miniblog v2";
        // API版本
        version: "1.0";
        // API 描述
        description: "MiniBlog 是一个基于 gRPC 的博客系统 API 服务，提供完整的博客管理功能，包括：\n- 用户认证与管理\n- 博客文章管理\n- 分类管理\n- 标签管理\n- 文章标签关联管理\n\n采用 RESTful 风格设计，支持通过 HTTP/JSON 访问所有 gRPC 接口";
        // 开发者的联系方式，包括项目名称、网址和电子邮件
        contact: {
            name: "小而美的博客项目";
            url: "https://github.com/clin211/miniblog-v2";
            email: "76742542lin@gmail.com";
        };
        // 可信息和链接（这里使用 MIT License）
        license: {
            name: "MIT License";
            url: "https://github.com/clin211/miniblog-v2/blob/master/LICENSE";
        };
    };
    //  指定访问协议为 HTTPS
    schemes: HTTPS;
    // 定义了服务的请求和响应的数据格式为 application/json
    consumes: "application/json";
    produces: "application/json";
};

// MiniBlog 定义了一个 MiniBlog RPC 服务
service MiniBlog {
    // Healthz 健康检查
    rpc Healthz(google.protobuf.Empty) returns (HealthzResponse) {
        // 通过 google.api.http 注释，指定 HTTP 方法为 GET、URL路径为 /healthz
        option (google.api.http) = {
            get: "/healthz",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            // 在 OpenAPI 文档中的接口简要描述，为"服务健康检查"
            summary: "服务健康检查";
            // 标识该操作的唯一ID，为"Healthz"
            operation_id: "Healthz";
            // 将该接口归类为"服务治理"
            tags: "服务治理";
        };
    }

    // Login 用户登录
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/system/auth/login",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "用户登录";
            operation_id: "Login";
            description: "";
            tags: "system/用户管理";
        };
    }

    // RefreshToken 刷新令牌
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
          put: "/v1/system/auth/refresh-token",
          body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "刷新令牌";
            operation_id: "RefreshToken";
            description: "";
            tags: "system/用户管理";
        };
    }


    // ChangePassword 修改密码
    rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {
        option (google.api.http) = {
            put: "/v1/system/users/{userID}/change-password",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "修改密码";
            operation_id: "ChangePassword";
            tags: "system/用户管理";
        };
    }

    // CreateUser 创建用户
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/v1/system/users",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "创建用户";
            operation_id: "CreateUser";
            tags: "system/用户管理";
        };
    }

    // UpdateUser 更新用户信息
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
        option (google.api.http) = {
            put: "/v1/system/users/{userID}",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "更新用户信息";
            operation_id: "UpdateUser";
            tags: "system/用户管理";
        };
    }

    // DeleteUser 删除用户
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/v1/system/users/{userID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "删除用户";
            operation_id: "DeleteUser";
            tags: "system/用户管理";
        };
    }

    // GetUser 获取用户信息
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get: "/v1/system/users/{userID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取用户信息";
            operation_id: "GetUser";
            tags: "system/用户管理";
        };
    }

    // ListUser 列出所有用户
    rpc ListUser(ListUserRequest) returns (ListUserResponse) {
        option (google.api.http) = {
            get: "/v1/system/users",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "列出所有用户";
            operation_id: "ListUser";
            tags: "system/用户管理";
        };
    }

    // CreatePost 创建文章
    rpc CreatePost(CreatePostRequest) returns (CreatePostResponse) {
        option (google.api.http) = {
            post: "/v1/system/posts",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "创建文章";
            operation_id: "CreatePost";
            tags: "system/博客管理";
        };
    }

    // UpdatePost 更新文章
    rpc UpdatePost(UpdatePostRequest) returns (UpdatePostResponse) {
        // 将 UpdatePost 映射为 HTTP PUT 请求，并通过 URL /v1/posts/{postID} 访问
        // {postID} 是一个路径参数，grpc-gateway 会根据 postID 名称，将其解析并映射到
        // UpdatePostRequest 类型中相应的字段.
        // body: "*" 表示请求体中的所有字段都会映射到 UpdatePostRequest 类型。
        option (google.api.http) = {
            put: "/v1/system/posts/{postID}",
            body: "*",
        };

        // 提供用于生成 OpenAPI 文档的注解
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            // 在文档中简要描述此操作的功能：更新文章。
            summary: "更新文章";
            // 为此操作指定唯一标识符（UpdatePost），便于跟踪
            operation_id: "UpdatePost";
            // 将此操作归类到 "博客管理" 标签组，方便在 OpenAPI 文档中组织接口分组
            tags: "system/博客管理";
        };
    }

    // DeletePost 删除文章
    rpc DeletePost(DeletePostRequest) returns (DeletePostResponse) {
        option (google.api.http) = {
            delete: "/v1/system/posts",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "删除文章";
            operation_id: "DeletePost";
            tags: "system/博客管理";
        };
    }

    // GetPost 获取文章信息
    rpc GetPost(GetPostRequest) returns (GetPostResponse) {
        option (google.api.http) = {
            get: "/v1/system/posts/{postID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取文章信息";
            operation_id: "GetPost";
            tags: "system/博客管理";
        };
    }

    // ListPost 列出所有文章
    rpc ListPost(ListPostRequest) returns (ListPostResponse) {
        option (google.api.http) = {
            get: "/v1/system/posts",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "列出所有文章";
            operation_id: "ListPost";
            tags: "system/博客管理";
        };
    }

    // CreateCategory 创建分类
    rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse) {
        option (google.api.http) = {
            post: "/v1/system/categories",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "创建分类";
            operation_id: "CreateCategory";
            tags: "system/分类管理";
        };
    }

    // UpdateCategory 更新分类
    rpc UpdateCategory(UpdateCategoryRequest) returns (UpdateCategoryResponse) {
        option (google.api.http) = {
            put: "/v1/system/categories/{categoryID}",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "更新分类";
            operation_id: "UpdateCategory";
            tags: "system/分类管理";
        };
    }

    // DeleteCategory 删除分类
    rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse) {
        option (google.api.http) = {
            delete: "/v1/system/categories/{categoryID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "删除分类";
            operation_id: "DeleteCategory";
            tags: "system/分类管理";
        };
    }

    // GetCategory 获取分类信息
    rpc GetCategory(GetCategoryRequest) returns (GetCategoryResponse) {
        option (google.api.http) = {
            get: "/v1/system/categories/{categoryID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取分类信息";
            operation_id: "GetCategory";
            tags: "system/分类管理";
        };
    }

    // ListCategory 列出所有分类
    rpc ListCategory(ListCategoryRequest) returns (ListCategoryResponse) {
        option (google.api.http) = {
            get: "/v1/system/categories",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "列出所有分类";
            operation_id: "ListCategory";
            tags: "system/分类管理";
        };
    }

    // CreateTag 创建标签
    rpc CreateTag(CreateTagRequest) returns (CreateTagResponse) {
        option (google.api.http) = {
            post: "/v1/system/tags",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "创建标签";
            operation_id: "CreateTag";
            tags: "system/标签管理";
        };
    }

    // UpdateTag 更新标签
    rpc UpdateTag(UpdateTagRequest) returns (UpdateTagResponse) {
        option (google.api.http) = {
            put: "/v1/system/tags/{tagID}",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "更新标签";
            operation_id: "UpdateTag";
            tags: "system/标签管理";
        };
    }

    // DeleteTag 删除标签
    rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse) {
        option (google.api.http) = {
            delete: "/v1/system/tags/{tagID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "删除标签";
            operation_id: "DeleteTag";
            tags: "system/标签管理";
        };
    }

    // GetTag 获取标签信息
    rpc GetTag(GetTagRequest) returns (GetTagResponse) {
        option (google.api.http) = {
            get: "/v1/system/tags/{tagID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取标签信息";
            operation_id: "GetTag";
            tags: "system/标签管理";
        };
    }

    // ListTag 列出所有标签
    rpc ListTag(ListTagRequest) returns (ListTagResponse) {
        option (google.api.http) = {
            get: "/v1/system/tags",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "列出所有标签";
            operation_id: "ListTag";
            tags: "system/标签管理";
        };
    }

    // CreatePostTag 创建文章标签关联
    rpc CreatePostTag(CreatePostTagRequest) returns (CreatePostTagResponse) {
        option (google.api.http) = {
            post: "/v1/system/post-tags",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "创建文章标签关联";
            operation_id: "CreatePostTag";
            tags: "system/文章标签管理";
        };
    }

    // DeletePostTag 删除文章标签关联
    rpc DeletePostTag(DeletePostTagRequest) returns (DeletePostTagResponse) {
        option (google.api.http) = {
            delete: "/v1/system/post-tags",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "删除文章标签关联";
            operation_id: "DeletePostTag";
            tags: "system/文章标签管理";
        };
    }

    // ListPostTags 列出文章标签关联
    rpc ListPostTags(ListPostTagsRequest) returns (ListPostTagsResponse) {
        option (google.api.http) = {
            get: "/v1/system/post-tags",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "列出文章标签关联";
            operation_id: "ListPostTags";
            tags: "system/文章标签管理";
        };
    }

    // BatchCreatePostTags 批量创建文章标签关联
    rpc BatchCreatePostTags(BatchCreatePostTagsRequest) returns (BatchCreatePostTagsResponse) {
        option (google.api.http) = {
            post: "/v1/system/post-tags/batch",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "批量创建文章标签关联";
            operation_id: "BatchCreatePostTags";
            tags: "system/文章标签管理";
        };
    }

    // BatchDeletePostTags 批量删除文章标签关联
    rpc BatchDeletePostTags(BatchDeletePostTagsRequest) returns (BatchDeletePostTagsResponse) {
        option (google.api.http) = {
            delete: "/v1/system/post-tags/batch",
            body: "*",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "批量删除文章标签关联";
            operation_id: "BatchDeletePostTags";
            tags: "system/文章标签管理";
        };
    }


    // --------------------------------- app ---------------------------------
    rpc AppPostList(ListPostRequest) returns (ListPostResponse) {
        option (google.api.http) = {
            get: "/v1/app/posts",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "列出文章";
            operation_id: "AppPostList";
            tags: "app/博客管理";
        };
    }

        // GetPost 获取文章信息
    rpc AppGetPost(GetPostRequest) returns (GetPostResponse) {
        option (google.api.http) = {
            get: "/v1/app/posts/{postID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取文章信息";
            operation_id: "AppGetPost";
            tags: "app/博客管理";
        };
    }

    // BatchAppGetPosts 批量获取文章信息
    rpc BatchAppGetPosts(BatchGetPostsRequest) returns (BatchGetPostsResponse) {
        option (google.api.http) = {
            get: "/v1/app/posts/batch",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "批量获取文章信息";
            operation_id: "BatchAppGetPosts";
            tags: "app/博客管理";
        };
    }

    // GetCategory 获取分类信息
    rpc AppGetCategory(GetCategoryRequest) returns (GetCategoryResponse) {
        option (google.api.http) = {
            get: "/v1/app/categories/{categoryID}",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "获取分类信息";
            operation_id: "GetCategory";
            tags: "app/分类管理";
        };
    }

    // ListCategory 列出所有分类
    rpc AppListCategory(ListCategoryRequest) returns (ListCategoryResponse) {
        option (google.api.http) = {
            get: "/v1/app/categories",
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "列出所有分类";
            operation_id: "ListCategory";
            tags: "app/分类管理";
        };
    }
}
